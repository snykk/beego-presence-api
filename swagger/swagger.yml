swagger: "2.0"
info:
  title: mobile API
  description: |
    mobile has every tool to get any job done, so codename for the new mobile APIs.
  version: 1.0.0
  contact:
    email: astaxie@gmail.com
basePath: /api/v1
paths:
  /auth/login:
    post:
      tags:
      - auth
      description: |-
        Authenticate user and generate a JWT token
        <br>
      operationId: AuthController.User Login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: loginRequest
        description: Login Data
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      responses:
        "200":
          description: '"Login successful"'
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid credentials
        "500":
          description: Failed to generate token
  /auth/regis:
    post:
      tags:
      - auth
      description: |-
        Register a new user with the provided data
        <br>
      operationId: AuthController.Register User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: registerRequest
        description: Registration Data
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      responses:
        "201":
          description: '"User registered successfully"'
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid input data
        "500":
          description: Failed to register user
  /departments/:
    get:
      tags:
      - departments
      description: |-
        Retrieve all departments, optionally including user and schedule lists.
        <br>
      operationId: DepartmentController.Get All Departments
      parameters:
      - in: query
        name: isIncludeUserList
        description: Include user list in response
        type: boolean
      - in: query
        name: isIncludeScheduleList
        description: Include schedule list in response
        type: boolean
      responses:
        "200":
          description: '"Departments retrieved successfully"'
          schema:
            $ref: '#/definitions/dto.DepartmentResponse'
        "400":
          description: Bad request
        "500":
          description: Internal server error
    post:
      tags:
      - departments
      description: |-
        Create a new department.
        <br>
      operationId: DepartmentController.Create New Department
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Department data
        required: true
        schema:
          $ref: '#/definitions/dto.DepartmentRequest'
      responses:
        "201":
          description: '"Department created successfully"'
          schema:
            $ref: '#/definitions/dto.DepartmentResponse'
        "400":
          description: Invalid input
        "500":
          description: Internal server error
  /departments/{id}:
    get:
      tags:
      - departments
      description: |-
        Retrieve a department by its ID, optionally including user and schedule lists.
        <br>
      operationId: DepartmentController.Get Department By ID
      parameters:
      - in: path
        name: id
        description: Department ID
        required: true
        type: integer
        format: int64
      - in: query
        name: isIncludeUserList
        description: Include user list in response
        type: boolean
      - in: query
        name: isIncludeScheduleList
        description: Include schedule list in response
        type: boolean
      responses:
        "200":
          description: '"Department retrieved successfully"'
          schema:
            $ref: '#/definitions/dto.DepartmentResponse'
        "400":
          description: Bad request
        "404":
          description: Department not found
        "500":
          description: Internal server error
    put:
      tags:
      - departments
      description: |-
        Update an existing department by ID.
        <br>
      operationId: DepartmentController.Update Department
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Department ID
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Updated department data
        required: true
        schema:
          $ref: '#/definitions/dto.DepartmentRequest'
      responses:
        "200":
          description: '"Department updated successfully"'
          schema:
            $ref: '#/definitions/dto.DepartmentResponse'
        "400":
          description: Invalid input
        "404":
          description: Department not found
        "500":
          description: Internal server error
    delete:
      tags:
      - departments
      description: |-
        Delete an existing department by ID.
        <br>
      operationId: DepartmentController.Delete Department
      parameters:
      - in: path
        name: id
        description: Department ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} "Department deleted successfully"'
        "400":
          description: Invalid department ID
        "404":
          description: Department not found
        "500":
          description: Internal server error
  /presences/:
    get:
      tags:
      - presences
      description: |-
        Retrieve all presences or the presences of a specific user based on the role.
        <br>
      operationId: PresenceController.GetAll
      parameters:
      - in: query
        name: isIncludeUser
        description: Include user data in the response
        type: boolean
      - in: query
        name: isIncludeSchedule
        description: Include schedule data in the response
        type: boolean
      responses:
        "200":
          description: '"Success"'
          schema:
            $ref: '#/definitions/dto.PresenceResponseList'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - presences
      description: |-
        Create a new presence entry for a user based on the schedule.
        <br>
      operationId: PresenceController.Create
      parameters:
      - in: body
        name: presence
        description: Presence data
        required: true
        schema:
          $ref: '#/definitions/dto.PresenceCreateRequest'
      responses:
        "201":
          description: '"Created"'
          schema:
            $ref: '#/definitions/dto.PresenceResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /presences/{id}:
    get:
      tags:
      - presences
      description: |-
        Retrieve a specific presence by ID.
        <br>
      operationId: PresenceController.GetById
      parameters:
      - in: path
        name: id
        description: Presence ID
        required: true
        type: integer
        format: int64
      - in: query
        name: isIncludeUser
        description: Include user data in the response
        type: boolean
      - in: query
        name: isIncludeSchedule
        description: Include schedule data in the response
        type: boolean
      responses:
        "200":
          description: '"Success"'
          schema:
            $ref: '#/definitions/dto.PresenceResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
      - presences
      description: |-
        Update an existing presence entry by ID.
        <br>
      operationId: PresenceController.Update
      parameters:
      - in: path
        name: id
        description: Presence ID
        required: true
        type: integer
        format: int64
      - in: body
        name: presence
        description: Updated presence data
        required: true
        schema:
          $ref: '#/definitions/dto.PresenceUpdateRequest'
      responses:
        "200":
          description: '"Success"'
          schema:
            $ref: '#/definitions/dto.PresenceResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - presences
      description: |-
        Delete a specific presence entry by ID.
        <br>
      operationId: PresenceController.Delete
      parameters:
      - in: path
        name: id
        description: Presence ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '"Success"'
          schema:
            $ref: '#/definitions/helpers.SuccessResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /schedules/:
    get:
      tags:
      - schedules
      description: |-
        Fetch all schedules with optional related data (department, user presence, user list)
        <br>
      operationId: ScheduleController.Get All Schedules
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: isIncludeDepartment
        description: Include department data
        type: boolean
      - in: query
        name: isIncludeUser
        description: Include user presence list
        type: boolean
      - in: query
        name: isIncludeUserList
        description: Include user list
        type: boolean
      responses:
        "200":
          description: '"Schedules retrieved successfully"'
          schema:
            $ref: '#/definitions/dto.ScheduleResponse'
        "400":
          description: Invalid query parameters
        "500":
          description: Failed to fetch schedules
  /schedules/{id}:
    get:
      tags:
      - schedules
      description: |-
        Fetch a schedule by its ID with optional related data (department, user presence, user list)
        <br>
      operationId: ScheduleController.Get Schedule By ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Schedule ID
        required: true
        type: integer
        format: int64
      - in: query
        name: isIncludeDepartment
        description: Include department data
        type: boolean
      - in: query
        name: isIncludeUser
        description: Include user presence list
        type: boolean
      - in: query
        name: isIncludeUserList
        description: Include user list
        type: boolean
      responses:
        "200":
          description: '"Schedule retrieved successfully"'
          schema:
            $ref: '#/definitions/dto.ScheduleResponse'
        "400":
          description: Invalid query parameters
        "404":
          description: Schedule not found
        "500":
          description: Failed to fetch schedule
    put:
      tags:
      - schedules
      description: |-
        Update an existing schedule by ID with the provided data
        <br>
      operationId: ScheduleController.Update Schedule
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Schedule ID
        required: true
        type: integer
        format: int64
      - in: body
        name: scheduleRequest
        description: Schedule Data
        required: true
        schema:
          $ref: '#/definitions/dto.ScheduleRequest'
      responses:
        "200":
          description: '"Schedule updated successfully"'
          schema:
            $ref: '#/definitions/dto.ScheduleResponse'
        "400":
          description: Invalid input data
        "404":
          description: Schedule not found
        "500":
          description: Failed to update schedule
    delete:
      tags:
      - schedules
      description: |-
        Delete an existing schedule by ID
        <br>
      operationId: ScheduleController.Delete Schedule
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Schedule ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} string "Schedule deleted successfully"'
        "400":
          description: Invalid schedule ID
        "404":
          description: Schedule not found
        "500":
          description: Failed to delete schedule
  /schedules[post]:
    get:
      tags:
      - schedules
      description: |-
        Create a new schedule based on the provided data
        <br>
      operationId: ScheduleController.Create Schedule
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: scheduleRequest
        description: Schedule Data
        required: true
        schema:
          $ref: '#/definitions/dto.ScheduleRequest'
      responses:
        "201":
          description: '"Schedule created successfully"'
          schema:
            $ref: '#/definitions/dto.ScheduleResponse'
        "400":
          description: Invalid input data
        "500":
          description: Failed to create schedule
  /users/:
    get:
      tags:
      - users
      description: |-
        Fetch all users with optional related data (department, presence list, schedule)
        <br>
      operationId: UserController.Get All Users
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: isIncludeDepartment
        description: Include department data
        type: boolean
      - in: query
        name: isIncludePresenceList
        description: Include user presence list
        type: boolean
      - in: query
        name: isIncludeSchedule
        description: Include user schedule data
        type: boolean
      responses:
        "200":
          description: '"Users retrieved successfully"'
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid query parameters
        "500":
          description: Failed to fetch users
  /users/{id}:
    get:
      tags:
      - users
      description: |-
        Fetch a user by their ID with optional related data (department, presence list, schedule)
        <br>
      operationId: UserController.Get User By ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: User ID
        required: true
        type: integer
        format: int64
      - in: query
        name: isIncludeDepartment
        description: Include department data
        type: boolean
      - in: query
        name: isIncludePresenceList
        description: Include user presence list
        type: boolean
      - in: query
        name: isIncludeSchedule
        description: Include user schedule data
        type: boolean
      responses:
        "200":
          description: '"User retrieved successfully"'
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid query parameters
        "404":
          description: User not found
        "500":
          description: Failed to fetch user
    put:
      tags:
      - users
      description: |-
        Update an existing user's details
        <br>
      operationId: UserController.Update User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: User ID
        required: true
        type: integer
        format: int64
      - in: body
        name: userRequest
        description: User Data
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      responses:
        "200":
          description: '"User updated successfully"'
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid input data
        "404":
          description: User not found
        "500":
          description: Failed to update user
    delete:
      tags:
      - users
      description: |-
        Delete a user by ID
        <br>
      operationId: UserController.Delete User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: User ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '"User deleted successfully"'
          schema:
            $ref: '#/definitions/helpers.SuccessResponse'
        "400":
          description: Invalid user ID
        "404":
          description: User not found
        "500":
          description: Failed to delete user
definitions:
  dto.DepartmentRequest:
    title: DepartmentRequest
    type: object
    properties:
      name:
        description: Department name
        type: string
        example: Human Resources
  dto.DepartmentResponse:
    title: DepartmentResponse
    type: object
    properties:
      created_at:
        description: Creation timestamp
        type: string
        example: "2023-01-01T00:00:00Z"
        format: datetime
      id:
        description: Department ID
        type: integer
        example: 1
        format: int64
      name:
        description: Department name
        type: string
        example: Human Resources
      schedules:
        description: List of schedules for the department
        type: array
        items:
          $ref: '#/definitions/dto.ScheduleResponse'
      updated_at:
        description: Last update timestamp
        type: string
        example: "2023-01-02T00:00:00Z"
        format: datetime
      users:
        description: List of users in the department
        type: array
        items:
          $ref: '#/definitions/dto.UserResponse'
  dto.LoginRequest:
    title: LoginRequest
    type: object
    properties:
      email:
        description: Email of the user
        type: string
        example: najibfikri@gmail.com
      password:
        description: Password of the user
        type: string
        example: Mys3cur3P@5s
  dto.LoginResponse:
    title: LoginResponse
    type: object
    properties:
      token:
        description: JWT token
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5hamliZmlrcmlAZ21haWwuY29tIiwiZXhwIjoxNzM1NDY0NTMzLCJpYXQiOjE3MzUzNzgxMzMsImlzcyI6ImJlZWdvLXByZXNlbmNlLWFwaSIsInJvbGUiOiJFTVBMT1lFRSIsInN1YiI6NH0.taLD0Rn2rllB4QW4ArHFbylBs2thl9KGC-wBXBDtJN4
  dto.PresenceCreateRequest:
    title: PresenceCreateRequest
    type: object
    properties:
      schedule_id:
        description: Schedule ID
        type: integer
        example: 1
        format: int64
      type:
        description: Presence type
        type: string
        example: in
  dto.PresenceResponse:
    title: PresenceResponse
    type: object
    properties:
      created_at:
        description: Creation timestamp
        type: string
        example: "2024-12-01T00:00:00Z"
        format: datetime
      id:
        description: Presence ID
        type: integer
        example: 1
        format: int64
      schedule:
        $ref: '#/definitions/dto.ScheduleResponse'
      schedule_id:
        type: integer
        example: 1
        format: int64
      status:
        description: Presence status
        type: string
        example: ontime
      type:
        description: Presence type
        type: string
        example: in
      updated_at:
        description: Last update timestamp
        type: string
        example: "2024-12-02T00:00:00Z"
        format: datetime
      user:
        $ref: '#/definitions/dto.UserResponse'
      user_id:
        type: integer
        example: 1
        format: int64
  dto.PresenceResponseList:
    title: PresenceResponseList
    type: object
  dto.PresenceUpdateRequest:
    title: PresenceUpdateRequest
    type: object
    properties:
      schedule_id:
        description: Schedule ID
        type: integer
        example: 1
        format: int64
      status:
        description: Presence status
        type: string
        example: ontime
      type:
        description: Presence type
        type: string
        example: in
      user_id:
        description: User ID
        type: integer
        example: 1
        format: int64
  dto.RegisterRequest:
    title: RegisterRequest
    type: object
    properties:
      department_id:
        description: ForeignKey to Department
        type: integer
        example: 1
        format: int64
      email:
        description: Email of the user
        type: string
        example: najibfikri@gmail.com
      name:
        description: Name of the user
        type: string
        example: Najib Fikri
      password:
        description: Password of the user
        type: string
        example: Mys3cur3P@5s
  dto.ScheduleRequest:
    title: ScheduleRequest
    type: object
    properties:
      department_id:
        description: ForeignKey to Department
        type: integer
        example: 1
        format: int64
      in_time:
        description: Time when the schedule starts
        type: string
        example: "08:00:00"
      name:
        description: Name of the schedule
        type: string
        example: Morning Shift
      out_time:
        description: Time when the schedule ends
        type: string
        example: "16:00:00"
  dto.ScheduleResponse:
    title: ScheduleResponse
    type: object
    properties:
      created_at:
        description: Time when the schedule was created
        type: string
        example: "2021-01-01T00:00:00Z"
        format: datetime
      department:
        $ref: '#/definitions/dto.DepartmentResponse'
        description: Department of the schedule
      department_id:
        description: ForeignKey to Department
        type: integer
        example: 1
        format: int64
      id:
        description: Unique identifier of the schedule
        type: integer
        example: 1
        format: int64
      in_time:
        description: Time when the schedule starts
        type: string
        example: "08:00:00"
      name:
        type: string
        example: Morning Shift
      out_time:
        description: Time when the schedule ends
        type: string
        example: "16:00:00"
      presences:
        description: Reverse relationship with Presence
        type: array
        items:
          $ref: '#/definitions/dto.PresenceResponse'
      updated_at:
        description: Time when the schedule was updated
        type: string
        example: "2021-01-01T00:00:00Z"
        format: datetime
      users:
        description: Reverse relationship with User
        type: array
        items:
          $ref: '#/definitions/dto.UserResponse'
  dto.UserRequest:
    title: UserRequest
    type: object
    properties:
      department_id:
        description: ForeignKey to Department
        type: integer
        example: 1
        format: int64
      email:
        description: Email of the user
        type: string
        example: najibfikri@gmail.com
      name:
        description: Name of the user
        type: string
        example: Najib Fikri
  dto.UserResponse:
    title: UserResponse
    type: object
    properties:
      created_at:
        description: Time when the user was created
        type: string
        example: "2024-12-01T00:00:00Z"
        format: datetime
      department:
        $ref: '#/definitions/dto.DepartmentResponse'
        description: Department of the user
      department_id:
        description: ForeignKey to Department
        type: integer
        example: 1
        format: int64
      email:
        description: Email of the user
        type: string
        example: najibfikri@gmail.com
      id:
        description: Unique identifier of the user
        type: integer
        example: 1
        format: int64
      name:
        description: Name of the user
        type: string
        example: Najib Fikri
      presences:
        description: Reverse relationship with Presence
        type: array
        items:
          $ref: '#/definitions/dto.PresenceResponse'
      schedule:
        $ref: '#/definitions/dto.ScheduleResponse'
        description: Schedule of the user
      schedule_id:
        description: ForeignKey to Schedule
        type: integer
        example: 1
        format: int64
      updated_at:
        description: Time when the user was updated
        type: string
        example: "2024-12-01T00:00:00Z"
        format: datetime
  helpers.SuccessResponse:
    title: SuccessResponse
    type: object
tags:
- name: users
  description: |
    UserController handles user-related operations such as retrieving, creating, updating, and deleting users.
- name: departments
  description: |
    DepartmentController handles operations related to departments management
- name: schedules
  description: |
    ScheduleController handles operations related to schedules
- name: presences
  description: |
    PresenceController handles requests related to presences (attendance) management.
